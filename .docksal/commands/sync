#!/usr/bin/env bash

## Sync your local environment with fresh data and code from Pantheon development environment.
##
## Usage: fin sync

# Abort if anything fails
set -e

start=$SECONDS

# SETTINGS
# See docksal.env 

# HELPERS

# Console colors
red='\033[0;31m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[1;33m'
NC='\033[0m'
bg='\[\033[0;35m\]'

echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }

# Windows check
is_windows ()
{
	local res=$(uname | grep 'CYGWIN_NT')
	if [[ "$res" != "" ]]; then
		return 0
	else
		return 1
	fi
}

# Execute
if [[ "${PROJECT_ROOT}" == "" ]]; then
	echo-red "\$PROJECT_ROOT is not set!"
	exit 1
fi

cd ${PROJECT_ROOT}

# Make sure docksal is running
echo -e "${green_bg} fin up ${NC}${green} Creating services...${NC}"
fin restart

# Check for a clean repository
if ! [ -z "$(git status --untracked-files=no --porcelain)" ]; then
  # Uncommitted changes in tracked files
  echo -e  "${red}WARNING: You have uncommitted changes in your branch.${NC}"
  echo
  git status
fi

cd ${PROJECT_ROOT}

# Start database sync
if [ -n "$1" ]; then
  # Pull DB if needed 
  if [ "$1" == 'pull' ]; then
    if [ -f db.sql.gz ]; then 
      rm db.sql.gz 
    fi
    fin terminus backup:get --element=db ${PANTH_ENV} --to=db.sql.gz
    FILE="db.sql.gz"
  else
    FILE="$1"
  fi
  echo -e "${green_bg} fin db import ${NC}${green} from "${FILE}" ${NC}"
  if [ -x "$(command -v pv)" ]; then
    pv ${FILE} | gunzip | fin db import
  else
    gunzip ${FILE} | fin db import
  fi
else
  echo -e "${green_bg} No DB Import ${NC}${green} (add file name to end of command or add 'pull')${NC}"
fi

# Cache Rebuild
echo -e "${green_bg} Drush cr ${NC}${green} Cache Rebuild...${NC}"
fin drush cr

echo -en "${green_bg} SYNC COMPLETE! ${NC} "
echo -en
echo -en "Open ${yellow}http://${VIRTUAL_HOST}${NC} in your browser to verify the setup.${NC}"
echo -en "${green_bg} fin drush uli! ${NC} "
fin drush uli

## Calculate Process time
duration=$(( SECONDS - start ))
## Echo Process time
echo -en "${green_bg} Sync runtime ${NC}${green} ${duration} seconds ${NC}"

exit

sleep 2
