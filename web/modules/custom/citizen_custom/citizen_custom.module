<?php

/**
 * @file
 * Contains citizen_custom.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function citizen_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the citizen custom module.
    case 'help.page.citizen_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom glue module for Electric Citizen sites') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave().
 */
function citizen_custom_entity_presave(EntityInterface $entity) {
  // Set value of field_alias for menu taxonomy.
  switch ($entity->bundle()) {
    case 'main_menu':
      $link = $entity->get('field_menu_link')->getValue();
      $uri = $link[0]['uri'];
      // Check for external link and process if TRUE.
      if (UrlHelper::isExternal($uri)) {
        $entity->set('field_alias', $uri);
        break;
      } else {
        $url = str_replace('entity:', '/', $uri);
        $url = str_replace('internal:', '', $url);
        //get the alias for the path and assign it in path.
        try {
          $alias = Drupal::service('path_alias.manager')->getAliasByPath($url);
        }
        catch (Exception $e) {
          $alias = $url;
        }
        $entity->set('field_alias', $alias);
        break;
      }
    case 'footer_menu':
      $link = $entity->get('field_menu_link')->getValue();
      $uri = $link[0]['uri'];
      // Check for external link and process if TRUE.
      if (UrlHelper::isExternal($uri)) {
        $entity->set('field_alias', $uri);
        break;
      } else {
        $url = str_replace('entity:', '/', $uri);
        $url = str_replace('internal:', '', $url);
        //get the alias for the path and assign it in path.
        // TODO: Add if for garbage handling without blowing up.
        try {
          $alias = Drupal::service('path_alias.manager')->getAliasByPath($url);
        }
        catch (Exception $e) {
          $alias = $url;
        }
        $entity->set('field_alias', $alias);
        break;
      }
    case 'escape':
      $links = $entity->get('field_escape_link');
      $config = \Drupal::configFactory()->getEditable('system.site');
      $current_nid = $config->getRawData()['page']['front'];
      $linksList = aliasProcess($links, $current_nid);
      $entity->set('field_escape_link', $linksList);
      break;
    case 'page':
      $current_nid = $entity->id();
      $allParagraphs = $entity->get('field_content')->referencedEntities();
      foreach ($allParagraphs as $paragraph) {
        $paragraphType = $paragraph->bundle();
        if ($paragraphType == 'button') {
          $links = $paragraph->get('field_buttons');
          $linksList = aliasProcess($links, $current_nid);
          $paragraph->set('field_buttons', $linksList);
          $paragraph->save();
        }
        if ($paragraphType === 'image' || $paragraphType === 'text_with_image') {
          $links = $paragraph->get('field_link');
          $linksList = aliasProcess($links, $current_nid);
          $paragraph->set('field_link', $linksList);
          $paragraph->save();
        }
      }
      break;
    case 'resource':
      $links = $entity->get('field_resource_url');
      $current_nid = $entity->id();
      $linksList = aliasProcess($links, $current_nid);
      $entity->set('field_resource_url', $linksList);
      break;
  }
}

function aliasProcess($links, $current_nid){
  $linksList = [];
  foreach ($links as $key => $ecLink) {
    $linkItem = $ecLink->getValue();
    $uri = $linkItem['uri'];
    // If the Link is external keep the alias the same as the url.
    if (UrlHelper::isExternal($uri)) {
      $linkItem['alias'] = $uri;
    } else {
      // If link path is returned as internal:.
      if (strpos($uri, 'internal') === 0) {
        if ($uri === 'internal:/') {
          $config = \Drupal::configFactory()->getEditable('system.site');
          $linkItem['alias'] = $config->getRawData()['page']['front'];
        } else
        // If the internal is actually to a node.
        if (strpos($uri, 'node')) {
          $input = explode("/", $uri);
          $nid = $input[2];
          $linkItem['alias'] = Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString();
          // If the internal is a fragment append the fragment onto the current nodes alias.
        } else {
          $input = explode(":", $uri);
          $linkItem['alias'] = Url::fromRoute('entity.node.canonical', ['node' => $current_nid])->toString() . $input[1];
        }
      } else {
        $url = Url::fromUri($uri);
        $nid = $url->getRouteParameters()['node'];
        $linkItem['alias'] = Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString();
      }
    }
    // Generate the array of values to assign to the paragraph.
    $linksList[] = $linkItem;
  }
  return $linksList;
}

/**
 * Implements hook_theme().
 */
function citizen_custom_theme() {
  return [
    'citizen_custom' => [
      'template' => 'citizen_custom',
      'render element' => 'children',
    ],
    'site_search' => [
      'variables' => [
        'title' => 'Site Search',
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_html to get roles.
 */
function citizen_custom_preprocess_html(&$variables){
  /* Find the current user */
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();
  foreach($userRole as $role ){
    if($role != 'authenticated'){
      $variables['attributes']['class'][] = 'role-' . $role;
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function citizen_custom_local_tasks_alter(&$local_tasks) {
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();
  if(isset($local_tasks['system.admin_content'])){
    unset($local_tasks['system.admin_content']);
  }
  if(!in_array('administrator', $userRole)){
    if(isset($local_tasks['redirect.list'])){
      unset($local_tasks['redirect.list']);
    }
    if(isset($local_tasks['redirect.settings'])){
      unset($local_tasks['redirect.settings']);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function citizen_custom_form_alter(&$form, FormStateInterface $form_state) {
  $formId = $form['#id'];
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();


  //move restricted field to footer and allow only admin access
  if(isset($form['field_restricted'])){
    $form['field_restricted']['#group'] = 'footer';
    if(in_array('administrator', $userRole)){
      $form['field_restricted']['#access'] = TRUE;
      if(($form['field_restricted']['widget']['value']['#default_value'] == TRUE) && ($formId == 'node-page-edit-form')){
        \Drupal::messenger()->addMessage('Editing or deleting restricted pages can have grave consequences in Gatsby. Proceed with caution.','warning');
      }
    }else{
      $form['field_restricted']['#access'] = FALSE;
      //remove delete option from basic blocks and logo grid blocks for non-admins
      if($form['field_restricted']['widget']['value']['#default_value'] == TRUE){
        if (($formId == 'block-content-basic-edit-form') || ($formId == 'block-content-logo-grid-edit-form')){
          unset($form['actions']['delete']);
        }
      }
    }
  }
  //prevent non-admin deletion of all one-off blocks
  switch($formId){
    case 'block-content-homepage-featured-content-edit-form':
      if(!in_array('administrator', $userRole)){
        unset($form['actions']['delete']);
      }
    case 'block-content-homepage-intro-edit-form':
      if(!in_array('administrator', $userRole)){
        unset($form['actions']['delete']);
      }
    case 'block-content-homepage-resources-edit-form':
      if(!in_array('administrator', $userRole)){
        unset($form['actions']['delete']);
      }
    case 'block-content-social-media-links-edit-form':
      if(!in_array('administrator', $userRole)){
        unset($form['actions']['delete']);
      }
    case 'block-content-translated-block-edit-form':
      if(!in_array('administrator', $userRole)){
        unset($form['actions']['delete']);
      }
    case 'block-content-escape-edit-form':
      if(!in_array('administrator', $userRole)){
        unset($form['actions']['delete']);
      }
  }

  if($formId == 'deployment-form'){
    if ($form['display']['#markup']) {
      unset($form['display']['#markup']);
    }
    if ($form['frontend_environment']['#value']->label() == 'LIVE') {
      $form['#attributes']['class'] = 'deployment-form live';
      $form['submit']['#value'] = 'Deploy Live';
    } else {
      $form['#attributes']['class'] = 'deployment-form preview';
      $form['submit']['#value'] = 'Deploy Preview';
    }
  }

  //add menu link instructions to page nodes
  if($formId == 'node-page-form' || $formId == 'node-page-edit-form'){
    $form['field_menu_insruction'] = array(
      '#markup' => '<div class="menu-instruction">
        <h2>Create Menu Link</h2>
        <p>Now that you\'ve got all this great content, remember to create a link for it in the <a href="/admin/structure/taxonomy/manage/main_menu/overview" target="_blank">main menu</a> or <a href="/admin/structure/taxonomy/manage/footer_menu/overview" target="_blank">footer menu</a> so users can find it!</p>
        <p>You can also link to it via a text field or paragraph widget if you do not want it in the main menu.</p>
        </div>',
      '#weight' => 7
    );
  }
}

/**
 * Implements hook_node_access().
 *
 * Enforces admin access restriction on marked entities
 */
function citizen_custom_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // If a node is being updated
  if (($op == 'update') || ($op == 'delete')) {
    if (isset($node->field_restricted)) {
      if (!empty($node->field_restricted)) {
        if ($node->get("field_restricted")->getString() == '1') {
          return AccessResult::forbidden();
        }
      }
    }
  }
  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_page_attachments().
 */
function citizen_custom_page_attachments(array &$attachments) {
  // Add custom admin theme files to admin pages.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $attachments['#attached']['library'][] = 'citizen_custom/admin-global';
  }
}

